<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	template="/WEB-INF/layouts/visualizer/master.xhtml">

	<ui:define name="title">Wholesale market - aggregate scores</ui:define>

	<ui:define name="headInclude">
		<script type="text/javascript">
				
		function handleWholesaleMarketPush(data) {
			
			var array = jQuery.parseJSON(data);
			var cnt = 0;
			jQuery.each(array, function() {
				  var pushObject = this;
				  wholesaleDynData.series[cnt++].addPoint([pushObject["millis"],pushObject["profit"]],false);
				  wholesaleDynData.series[cnt++].addPoint([pushObject["millis"],pushObject["energy"]],false);
			 	  
				});
			wholesaleDynData.redraw();
		}
		
		var wholesaleDynData;
		$(document).ready(
			function() {
				var appending = new Array("PRICE(&euro;)", "ENERGY(MWh)");
				if (#{!logParametersBean.isFirstRun}) {
				    if (#{logParametersBean.isReplayerMode}) {
					    wholesaleDynData = dynDataGraph('wholesaleDynData',#{wholesaleMarketBeanReplayer.wholesaleDynData},'',getBaseDynYAxisData("Price (&euro;)","Traded energy (MWh)"), appending);
				    } else {
					    wholesaleDynData = dynDataGraph('wholesaleDynData',#{wholesaleMarketBean.wholesaleDynData},'',getBaseDynYAxisData("Price (&euro;)","Traded energy (MWh)"), appending);
				    }
				}
			}		
		);
			
		// Zurueckgesprungen im Diagramm
		function handlePushTsChoosenBackward(data) {

			var pushObjects = jQuery.parseJSON(data);
			
			var index = 0;
			var i = 0;
			var tsMillis;
			var indexPoints;
			var selectedRange = wholesaleDynData.rangeSelector.selected;
			var seriesLength = wholesaleDynData.series.length - 1;
	 		var visibleSeries = [];
			
			var index2 = 0;
			var cnt = 0;

			// Range Selector auf ALL, sonst fehlen Werte
			wholesaleDynData.rangeSelector.clickButton(5, 5, true);
			
			while (pushObjects.length > index) {
				
			    var pushObject = pushObjects[index];
			    
	 			if (!wholesaleDynData.series[index].visible) {
	 				wholesaleDynData.series[index].setVisible(true);
	 				visibleSeries.push(false);
	 			} else {
	 				visibleSeries.push(true);
	 			}
	 			
	 			wholesaleDynData.series[index].setData(pushObject, false);
			    
			    index++;
			}
			
			var visibleLengths = visibleSeries.length;
			for (var i = 0; i &lt; visibleLengths; i++) {
				if (wholesaleDynData.series[i] !== undefined) {
					wholesaleDynData.series[i].setVisible(visibleSeries[i], false);
				}
			}
			
			wholesaleDynData.redraw();
			wholesaleDynData.rangeSelector.clickButton(selectedRange, selectedRange, true);
			
// 			var pushArray = jQuery.parseJSON(data);
// 			var index = 0;
// 			var i = 0;
// 			var tsMillis;
// 			var indexPoints;
// 			var selectedRange = wholesaleDynData.rangeSelector.selected;
// 			var seriesLength = wholesaleDynData.series.length - 1;
// 	 		var visibleSeries = [];
			
// //	 		// Auf All setzen, damit alle Werte geloescht werden koennen
// //	 		// Ansonsten z.B. range auf 1w und dann werden nich alle Werte im Diagramm angezeigt
// //	 		// Dadurch kommt dann beim loeschen die Meldung, distributionDynDataOneTimeslot.series[index].points[0].remove(false)
// //	 		// is not a function.
// //	 		// Es koennen vom Broker Model fuer eine Ts Werte fehlen, deswegen hat die obige Loesung
// //	 		// auch Probleme mit is not defined geworfen
// //	 		// -> Series unterschiedliche Laenge
// 			wholesaleDynData.rangeSelector.clickButton(5, 5, true);
	 		
// 	 		while (index &lt;= seriesLength) {
	 			
// 	 			if (!wholesaleDynData.series[index].visible) {
// 	 				wholesaleDynData.series[index].setVisible(true);
// 	 				visibleSeries.push(false);
// 	 			} else {
// 	 				visibleSeries.push(true);
// 	 			}
	 			
// 	 	 		indexPoints = wholesaleDynData.series[index].points.length - 1;

// 	 			i = 0;
	 	 						
// 	 	 		while (indexPoints >= 0) {

// 	 	 			if (pushArray.indexOf(wholesaleDynData.series[index].points[indexPoints].x) >= 0) {

// 	 	 				wholesaleDynData.series[index].points[indexPoints].remove(false);
// 	 	 			}
	 	 			
// 	 	 			indexPoints--;
// 	 	 		}

// 	 			index++;
// 	 		}
	 		
// 			var visibleLengths = visibleSeries.length;
// 			for (var i = 0; i &lt; visibleLengths; i++) {
// 				if (wholesaleDynData.series[i] !== undefined) {
// 					wholesaleDynData.series[i].setVisible(visibleSeries[i], false);
// 				}
// 			}
			
// 			wholesaleDynData.redraw();
// 			wholesaleDynData.rangeSelector.clickButton(selectedRange, selectedRange, true);
		}
		
// 		// Zurueckgesprungen im Diagramm
// 		function handlePushTsChoosenBackward(data) {
// 			console.log('wholesaleCumulative');
// 			console.log(data);
			
// 			var pushArray = jQuery.parseJSON(data);
// 			var index = 0;
// 			var i = 0;
// 			var tsMillis;
// 			var indexPoints;
// 			var selectedRange = wholesaleDynData.rangeSelector.selected;
// 			var seriesLength = wholesaleDynData.series.length - 1;
	 			
// //	 		// Auf All setzen, damit alle Werte geloescht werden koennen
// //	 		// Ansonsten z.B. range auf 1w und dann werden nich alle Werte im Diagramm angezeigt
// //	 		// Dadurch kommt dann beim loeschen die Meldung, distributionDynDataOneTimeslot.series[index].points[0].remove(false)
// //	 		// is not a function.
// //	 		// Es koennen vom Broker Model fuer eine Ts Werte fehlen, deswegen hat die obige Loesung
// //	 		// auch Probleme mit is not defined geworfen
// //	 		// -> Series unterschiedliche Laenge
// 			wholesaleDynData.rangeSelector.clickButton(5, 5, true);
	 		
// 	 		while (index &lt;= seriesLength) {
	 	 		
// 	 	 		indexPoints = wholesaleDynData.series[index].points.length - 1;
// 	 			i = 0;
	 			
// 	 			// Alle Millis Ts durchlaufen
// 	 	 		while (i &lt; pushArray.length) {
	 	 			
// 	 	 			tsMillis = pushArray[i];
	 	 				
// 	 	 			// Entspricht der letzte Punkt im Diagramm (TsMillis Wert auf der x-Achse)
// 	 	 			// den zu loeschenden TsMillisWert. Diese werden rueckwaerts durchgelaufen
// 	 	 			// und im Diagramm als Points geloescht. Beachtet auch, dass im Diagramm
// 	 	 			// fuer einen Ts der Punkt im Diagramm fehlen kann.
// 	 	 			if (wholesaleDynData.series[index].points[indexPoints].x == tsMillis) {
	 	 					
// 	 	 				wholesaleDynData.series[index].points[indexPoints].remove(false);
// 	 	 	 			indexPoints--;
// 	 	 			} 	 	
	 	 			
// 	 	 			i++;
// 	 	 		}

// 	 			index++;
// 	 		}
	 		
// 	 		wholesaleDynData.redraw();
// 	 		wholesaleDynData.rangeSelector.clickButton(selectedRange, selectedRange, true);
// 		}
		
		// Vorspringen im Diagramm
	function handleWholesaleMarketPushTsChoosen(data) {
		
		var pushObjects = jQuery.parseJSON(data);
		var index = 0;
		var index2 = 0;
		var cnt = 0;
		var selectedRange = wholesaleDynData.rangeSelector.selected;
		var visibleSeries = [];
		
		index = 0;
		
		while (pushObjects.length > index) {
			
		    var pushObject = pushObjects[index];
		    
		    index2 = 0;
		    cnt = 0;
		    
		    while (pushObject.length > index2) {

		    	var object = pushObject[index2];
		    	var indexSeries = object["index"];

	 			if (!wholesaleDynData.series[indexSeries].visible) {
	 				wholesaleDynData.series[indexSeries].setVisible(true);
	 				visibleSeries.push(false);
	 			} else {
	 				visibleSeries.push(true);
	 			}
	 			
	 			wholesaleDynData.series[indexSeries++].addPoint([object["millis"],object["profit"]],false);
		    
	 			if (!wholesaleDynData.series[indexSeries].visible) {
	 				wholesaleDynData.series[indexSeries].setVisible(true);
	 				visibleSeries.push(false);
	 			} else {
	 				visibleSeries.push(true);
	 			}
	 			
	 			wholesaleDynData.series[indexSeries++].addPoint([object["millis"],object["energy"]],false);
				index2++;
		    }
		    
		    index++;
		}
		
		var visibleLengths = visibleSeries.length;
		for (var i = 0; i &lt; visibleLengths; i++) {
			if (wholesaleDynData.series[i] !== undefined) {
				wholesaleDynData.series[i].setVisible(visibleSeries[i], false);
			}
		}
		
		wholesaleDynData.redraw();
		wholesaleDynData.rangeSelector.clickButton(selectedRange, selectedRange, true); 
	}
		
// 		function handleWholesaleMarketPushTsChoosen(data) {
// 			console.log('wholesaleCumulative');
// 			console.log(data);
// 			var pushObjects = jQuery.parseJSON(data);
// 			var index = 0;
// 			var index2 = 0;
// 			var cnt = 0;
// 			var selectedRange = wholesaleDynData.rangeSelector.selected;
			
// //	 		while (distributionDynDataOneTimeslot.series[0].points.length > 0) {
			
// //	 			distributionDynDataOneTimeslot.series[0].points[0].remove(false);
// //	 			distributionDynDataOneTimeslot.series[1].points[0].remove(false);
// //	 		}
			
// // 			// Bei Default laenge 2, aber 3
// // 			// Bei Mehr dann laenge 4, aber 5???
// // 			var seriesLength = wholesaleDynData.series.length - 1;

// // 			// Remove all series points
// // 			while (wholesaleDynData.series[0].points.length > 0) {
				
// // 				index = 0;
// // 				cnt = 0;

// // 				while (!(index >= seriesLength)) {
					
// // 					wholesaleDynData.series[cnt++].points[0].remove(false);
// // 					index++;
// // 					wholesaleDynData.series[cnt++].points[0].remove(false);
// // 					index++;
// // 				}
// // 			}
			
// // 			index = 0;
			
// 			while (pushObjects.length > index) {
				
// 			    var pushObject = pushObjects[index];
			    
// 			    index2 = 0;
// 			    cnt = 0;
			    
// 			    while (pushObject.length > index2) {

// 			    	var object = pushObject[index2];
// 			    	var indexSeries = object["index"];

// 			    	wholesaleDynData.series[indexSeries++].addPoint([object["millis"],object["profit"]],false);
// 			    	wholesaleDynData.series[indexSeries++].addPoint([object["millis"],object["energy"]],false);
// 					index2++;
// 			    }
			    
// 			    index++;
// 			}
			
// 			wholesaleDynData.redraw();
// 			wholesaleDynData.rangeSelector.clickButton(selectedRange, selectedRange, true);
// 		}
			  
		</script>
	</ui:define>

	<ui:define name="maincontent">
			
		<script>
			var appending = new Array("PRICE(&euro;)", "ENERGY(MWh)");
			wholesaleDynData = dynDataGraph('wholesaleDynData',#{wholesaleMarketBeanReplayer.wholesaleDynData},'',getBaseDynYAxisData("Price (&euro;)","Traded energy (MWh)"), appending);
		</script>
				
		<div id="wholesaleDynData"
			style="min-width: 400px; height: 620px; margin: 0 auto" />
		<p:socket onMessage="handleWholesaleMarketPush"
			channel="/wholesalemarketpush" rendered="#{!logParametersBean.isReplayerMode}" />
	</ui:define>

	<ui:define name="rowcontent">
	</ui:define>

     <ui:define name="handlePush">
		<p:socket onMessage="handleWholesaleMarketPushTsChoosen" channel="/marketTransactionsTsChoosen" rendered="#{logParametersBean.isReplayerMode}" />
		<p:socket onMessage="handlePushTsChoosenBackward" channel="/tsChoosenBackwardSafetyTs" rendered="#{logParametersBean.isReplayerMode}" />
		<p:socket onMessage="handleWholesaleMarketPushTsChoosen" channel="/wholesalecumulativeExtendedChangeTimeslot" rendered="#{logParametersBean.isReplayerMode}" />
		<p:socket onMessage="handlePushTsChoosenBackward" channel="/wholesalecumulativeBackwardExtendedChangeTimeslot" rendered="#{logParametersBean.isReplayerMode}" />
<!-- 	<p:socket onMessage="handleWholesaleMarketPushTsChoosen" channel="/wholesalecumulativeExtendedChangeTimeslot#{session.id}" rendered="#{logParametersBean.isReplayerMode}" /> -->
<!-- 	<p:socket onMessage="handlePushTsChoosenBackward" channel="/wholesalecumulativeBackwardExtendedChangeTimeslot#{session.id}" rendered="#{logParametersBean.isReplayerMode}" /> -->
	</ui:define>

</ui:composition>